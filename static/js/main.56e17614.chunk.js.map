{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","components/Logo/Logo.jsx","App.js","index.js","components/Chart/Chart.module.css","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","duration","separator","Date","toDateString","fetchData","country","a","url","axios","get","Summary","result","Confirmed","Recovered","Deaths","Last_Update","Global","TotalConfirmed","TotalRecovered","TotalDeaths","fetchDailyData","console","log","map","dailyData","date","total","reportDate","countries","name","Country","slug","Slug","Chart","useState","setDailyData","useEffect","dailyDataResult","fetchDailyDataAPI","lineChart","length","options","maintainAspectRatio","scales","xAxes","gridLines","display","labels","datasets","label","borderColor","fill","pointHoverBackgroundColor","pointHoverRadius","borderWidth","canvasContainer","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","countriesResult","sort","b","fetchCountriesAPI","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","value","i","key","Logo","App","state","selectedCountry","fetchedData","setState","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.56e17614.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from \"react\";\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\nimport styles from \"./Cards.module.css\";\nimport CountUp from \"react-countup\";\nimport cx from \"classnames\";\n\nconst Cards = ({ data }) => {\n  const { confirmed, recovered, deaths, lastUpdate } = data;\n\n  if (!confirmed || !recovered || !deaths || !lastUpdate) {\n    return \"Loading ... \";\n  }\n\n  return (\n    <div className={styles.container}>\n      <Grid container spacing={3} justify=\"center\">\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={cx(styles.card, styles.infected)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Infected\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp start={0} end={confirmed} duration={2.5} separator=\",\" />\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\">\n              Number of infected people of COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={cx(styles.card, styles.recovered)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Recovered\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp start={0} end={recovered} duration={2.5} separator=\",\" />\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\">\n              Number of recovered people of COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={cx(styles.card, styles.deaths)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Deaths\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp start={0} end={deaths} duration={2.5} separator=\",\" />\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\">\n              Number of deaths cause by COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Cards;\n","import axios from \"axios\";\nexport const fetchData = async (country) => {\n  const BASE_URL = \"https://api.covid19api.com\";\n\n  let url = `${BASE_URL}/summary`;\n\n  if (country && country !== \"global\") {\n    url = `https://api-corona.azurewebsites.net/country/${country}`;\n    try {\n      const { data } = await axios.get(url);\n      const Summary = data.Summary;\n      const result = {\n        confirmed: Summary.Confirmed,\n        recovered: Summary.Recovered,\n        deaths: Summary.Deaths,\n        lastUpdate: Summary.Last_Update,\n      };\n      return result;\n    } catch (error) {\n      return {\n        confirmed: 0,\n        recovered: 0,\n        deaths: 0,\n        lastUpdate: 0,\n      };\n    }\n  } else {\n    try {\n      const { data } = await axios.get(url);\n      const result = {\n        confirmed: data.Global.TotalConfirmed,\n        recovered: data.Global.TotalRecovered,\n        deaths: data.Global.TotalDeaths,\n        lastUpdate: data.Date,\n      };\n      return result;\n    } catch (error) {}\n  }\n};\n\nexport const fetchDailyData = async (country) => {\n  console.log(country);\n  if (country && country !== \"global\") {\n    console.log(\"country\", country);\n    const BASE_URL = `https://api-corona.azurewebsites.net`;\n    const url = `${BASE_URL}/timeline/${country}`;\n    try {\n      const { data } = await axios.get(url);\n      const result = data.map((dailyData) => ({\n        confirmed: dailyData.Confirmed,\n        deaths: dailyData.Deaths,\n        date: dailyData.Date,\n      }));\n\n      return result;\n    } catch (error) {}\n  } else {\n    const BASE_URL = \"https://covid19.mathdro.id/api\";\n    const url = `${BASE_URL}/daily`;\n    try {\n      const { data } = await axios.get(url);\n      const result = data.map((dailyData) => ({\n        confirmed: dailyData.confirmed.total,\n        deaths: dailyData.deaths.total,\n        date: dailyData.reportDate,\n      }));\n\n      return result;\n    } catch (error) {}\n  }\n};\n\nexport const countries = async () => {\n  const BASE_URL = \"https://api.covid19api.com\";\n  try {\n    const { data } = await axios.get(`${BASE_URL}/countries`);\n    return data.map((country) => ({\n      name: country.Country,\n      slug: country.Slug,\n    }));\n  } catch (error) {}\n};\n","import React, { useState, useEffect } from \"react\";\nimport { fetchDailyData } from \"../../api\";\nimport { Line } from \"react-chartjs-2\";\nimport styles from \"./Chart.module.css\";\n\nconst Chart = ({ data, country }) => {\n  const [dailyData, setDailyData] = useState([]);\n\n  useEffect(() => {\n    console.log(\"useEffect is called with country\", country);\n    const fetchDailyDataAPI = async (country) => {\n      const dailyDataResult = await fetchDailyData(country);\n      console.log(dailyDataResult);\n      setDailyData(dailyDataResult);\n    };\n    fetchDailyDataAPI(country);\n  }, [country]);\n\n  const lineChart = dailyData.length ? (\n    <Line\n      options={{\n        maintainAspectRatio: false,\n        scales: {\n          xAxes: [\n            {\n              gridLines: {\n                display: false,\n              },\n            },\n          ],\n        },\n      }}\n      data={{\n        labels: dailyData.map(({ date }) => new Date(date).toDateString()),\n        datasets: [\n          {\n            data: dailyData.map(({ confirmed }) => confirmed),\n            label: \"Infected\",\n            borderColor: \"rgba(110, 225, 245, 0.803)\",\n            fill: true,\n            pointHoverBackgroundColor: \"blue\",\n            pointHoverRadius: 7,\n            borderWidth: 4,\n          },\n          {\n            data: dailyData.map(({ deaths }) => deaths),\n            label: \"Deaths\",\n            borderColor: \"rgba(250, 132, 119, 0.803)\",\n            fill: true,\n            pointHoverBackgroundColor: \"red\",\n            pointHoverRadius: 7,\n            borderWidth: 4,\n          },\n        ],\n      }}\n    />\n  ) : (\n    <div>\n      Oops... it seems you cannot get the data for this country right now :(\n    </div>\n  );\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.canvasContainer}>{lineChart}</div>\n    </div>\n  );\n};\n\nexport default Chart;\n","import React, { useState, useEffect } from \"react\";\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\nimport styles from \"./CountryPicker.module.css\";\nimport { countries } from \"../../api\";\n\nconst CountryPicker = ({ handleCountryChange }) => {\n  const [fetchedCountries, setFetchedCountries] = useState([]);\n  useEffect(() => {\n    const fetchCountriesAPI = async () => {\n      const countriesResult = await countries();\n      countriesResult.sort((a, b) => {\n        return a.name < b.name ? -1 : 1;\n      });\n      setFetchedCountries(countriesResult);\n    };\n    fetchCountriesAPI();\n  }, [setFetchedCountries]);\n\n  return (\n    <FormControl className={styles.formControl}>\n      <NativeSelect\n        defaultValue=\"\"\n        onChange={(e) => handleCountryChange(e.target.value)}\n      >\n        <option value=\"global\">Global</option>\n        {fetchedCountries.map((country, i) => (\n          <option key={i} value={country.slug}>\n            {country.name}\n          </option>\n        ))}\n      </NativeSelect>\n    </FormControl>\n  );\n};\n\nexport default CountryPicker;\n","import React from \"react\";\nimport styles from \"./Logo.module.css\";\n\nconst Logo = () => {\n  return (\n    <div>\n      <h1>COVID-19 Statistic</h1>\n    </div>\n  );\n};\n\nexport default Logo;\n","import React from \"react\";\nimport { Cards, Chart, CountryPicker, Logo } from \"./components\";\nimport styles from \"./App.module.css\";\nimport { fetchData } from \"./api\";\n\nclass App extends React.Component {\n  state = {\n    data: {},\n    selectedCountry: \"\",\n  };\n\n  async componentDidMount() {\n    const fetchedData = await fetchData(this.state.selectedCountry);\n    this.setState({ data: fetchedData });\n  }\n\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country);\n    console.log(fetchedData);\n    this.setState({\n      data: fetchedData,\n      selectedCountry: country,\n    });\n  };\n\n  render() {\n    const { data, selectedCountry } = this.state;\n    return (\n      <div className={styles.container}>\n        <Logo />\n        <Cards data={data} />\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\n        <Chart data={data} country={selectedCountry} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\",\"canvasContainer\":\"Chart_canvasContainer__2276z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\"};"],"sourceRoot":""}