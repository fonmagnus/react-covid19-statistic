{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","components/Chart/Chart.module.css","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","duration","separator","Date","toDateString","fetchData","country","a","url","BASE_URL","TODAY","now","YESTERDAY","axios","get","result","length","Confirmed","Deaths","Recovered","Global","TotalConfirmed","TotalRecovered","TotalDeaths","fetchDailyData","console","log","map","dailyData","date","total","reportDate","countries","name","Country","slug","Slug","Chart","useState","setDailyData","useEffect","dailyDataResult","fetchDailyDataAPI","lineChart","labels","datasets","label","borderColor","fill","pointHoverBackgroundColor","pointHoverRadius","borderWidth","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","countriesResult","sort","b","fetchCountriesAPI","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","value","i","key","App","state","selectedCountry","fetchedData","setState","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b7585a6a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from \"react\";\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\nimport styles from \"./Cards.module.css\";\nimport CountUp from \"react-countup\";\nimport cx from \"classnames\";\n\nconst Cards = ({ data }) => {\n  const { confirmed, recovered, deaths, lastUpdate } = data;\n\n  if (!confirmed || !recovered || !deaths || !lastUpdate) {\n    return \"Loading ... \";\n  }\n\n  return (\n    <div className={styles.container}>\n      <Grid container spacing={3} justify=\"center\">\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={cx(styles.card, styles.infected)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Infected\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp start={0} end={confirmed} duration={2.5} separator=\",\" />\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\">\n              Number of infected people of COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={cx(styles.card, styles.recovered)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Recovered\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp start={0} end={recovered} duration={2.5} separator=\",\" />\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\">\n              Number of recovered people of COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={cx(styles.card, styles.deaths)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Deaths\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp start={0} end={deaths} duration={2.5} separator=\",\" />\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\">\n              Number of deaths cause by COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Cards;\n","import axios from \"axios\";\nexport const fetchData = async (country) => {\n  const BASE_URL = \"https://api.covid19api.com\";\n\n  let url = `${BASE_URL}/summary`;\n\n  if (country && country !== \"global\") {\n    const TODAY = Date.now();\n    const YESTERDAY = TODAY - 24 * 60 * 60 * 1000;\n    url = `${BASE_URL}/country/${country}?from=${YESTERDAY}&to=${TODAY}`;\n    try {\n      const { data } = await axios.get(url);\n      const result = {\n        confirmed: data[data.length - 1].Confirmed,\n        recovered: data[data.length - 1].Deaths,\n        deaths: data[data.length - 1].Recovered,\n        lastUpdate: data[data.length - 1].Date,\n      };\n      return result;\n    } catch (error) {\n      return {\n        confirmed: 0,\n        recovered: 0,\n        deaths: 0,\n        lastUpdate: 0,\n      };\n    }\n  } else {\n    try {\n      const { data } = await axios.get(url);\n      const result = {\n        confirmed: data.Global.TotalConfirmed,\n        recovered: data.Global.TotalRecovered,\n        deaths: data.Global.TotalDeaths,\n        lastUpdate: data.Date,\n      };\n      return result;\n    } catch (error) {}\n  }\n};\n\nexport const fetchDailyData = async (country) => {\n  console.log(country);\n  if (country && country !== \"global\") {\n    console.log(\"country\", country);\n    const BASE_URL = \"https://api.covid19api.com\";\n    const url = `${BASE_URL}/total/dayone/country/${country}`;\n    try {\n      const { data } = await axios.get(url);\n      const result = data.map((dailyData) => ({\n        confirmed: dailyData.Confirmed,\n        deaths: dailyData.Deaths,\n        date: dailyData.Date,\n      }));\n\n      return result;\n    } catch (error) {}\n  } else {\n    const BASE_URL = \"https://covid19.mathdro.id/api\";\n    const url = `${BASE_URL}/daily`;\n    try {\n      const { data } = await axios.get(url);\n      const result = data.map((dailyData) => ({\n        confirmed: dailyData.confirmed.total,\n        deaths: dailyData.deaths.total,\n        date: dailyData.reportDate,\n      }));\n\n      return result;\n    } catch (error) {}\n  }\n};\n\nexport const countries = async () => {\n  const BASE_URL = \"https://api.covid19api.com\";\n  try {\n    const { data } = await axios.get(`${BASE_URL}/countries`);\n    return data.map((country) => ({\n      name: country.Country,\n      slug: country.Slug,\n    }));\n  } catch (error) {}\n};\n","import React, { useState, useEffect } from \"react\";\nimport { fetchDailyData } from \"../../api\";\nimport { Line } from \"react-chartjs-2\";\nimport styles from \"./Chart.module.css\";\n\nconst Chart = ({ data, country }) => {\n  const [dailyData, setDailyData] = useState([]);\n\n  useEffect(() => {\n    console.log(\"useEffect is called with country\", country);\n    const fetchDailyDataAPI = async (country) => {\n      const dailyDataResult = await fetchDailyData(country);\n      console.log(dailyDataResult);\n      setDailyData(dailyDataResult);\n    };\n    fetchDailyDataAPI(country);\n  }, [country]);\n\n  const lineChart = dailyData.length ? (\n    <Line\n      data={{\n        labels: dailyData.map(({ date }) => new Date(date).toDateString()),\n        datasets: [\n          {\n            data: dailyData.map(({ confirmed }) => confirmed),\n            label: \"Infected\",\n            borderColor: \"rgba(110, 225, 245, 0.803)\",\n            fill: true,\n            pointHoverBackgroundColor: \"blue\",\n            pointHoverRadius: 7,\n            borderWidth: 4,\n          },\n          {\n            data: dailyData.map(({ deaths }) => deaths),\n            label: \"Deaths\",\n            borderColor: \"rgba(250, 132, 119, 0.803)\",\n            fill: true,\n            pointHoverBackgroundColor: \"red\",\n            pointHoverRadius: 7,\n            borderWidth: 4,\n          },\n        ],\n      }}\n    />\n  ) : (\n    <div>\n      Oops... it seems you cannot get the data for this country right now :(\n    </div>\n  );\n\n  return (\n    <div className={styles.container}>{country ? lineChart : lineChart}</div>\n  );\n};\n\nexport default Chart;\n","import React, { useState, useEffect } from \"react\";\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\nimport styles from \"./CountryPicker.module.css\";\nimport { countries } from \"../../api\";\n\nconst CountryPicker = ({ handleCountryChange }) => {\n  const [fetchedCountries, setFetchedCountries] = useState([]);\n  useEffect(() => {\n    const fetchCountriesAPI = async () => {\n      const countriesResult = await countries();\n      countriesResult.sort((a, b) => {\n        return a.name < b.name ? -1 : 1;\n      });\n      setFetchedCountries(countriesResult);\n    };\n    fetchCountriesAPI();\n  }, [setFetchedCountries]);\n\n  return (\n    <FormControl className={styles.formControl}>\n      <NativeSelect\n        defaultValue=\"\"\n        onChange={(e) => handleCountryChange(e.target.value)}\n      >\n        <option value=\"global\">Global</option>\n        {fetchedCountries.map((country, i) => (\n          <option key={i} value={country.slug}>\n            {country.name}\n          </option>\n        ))}\n      </NativeSelect>\n    </FormControl>\n  );\n};\n\nexport default CountryPicker;\n","import React from \"react\";\nimport { Cards, Chart, CountryPicker } from \"./components\";\nimport styles from \"./App.module.css\";\nimport { fetchData } from \"./api\";\n\nclass App extends React.Component {\n  state = {\n    data: {},\n    selectedCountry: \"\",\n  };\n\n  async componentDidMount() {\n    const fetchedData = await fetchData(this.state.selectedCountry);\n    this.setState({ data: fetchedData });\n  }\n\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country);\n    console.log(fetchedData);\n    this.setState({\n      data: fetchedData,\n      selectedCountry: country,\n    });\n  };\n\n  render() {\n    const { data, selectedCountry } = this.state;\n    return (\n      <div className={styles.container}>\n        <Cards data={data} />\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\n        <Chart data={data} country={selectedCountry} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\"};"],"sourceRoot":""}